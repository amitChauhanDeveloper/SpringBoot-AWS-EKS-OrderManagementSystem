version: '3.3'

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - app-network
    volumes:
      - zookeeper-data:/bitnami/zookeeper  # Persist Zookeeper data store outside container

  kafka:
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - app-network
    volumes:
      - kafka-data:/bitnami/kafka  # Persist Kafka data store outside container

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=postgres
    networks:
      - app-network

  orderservice:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - kafka
      - postgres
    environment:
      - PRODUCT_SERVICE_URL=http://productservice:8083/api/products
      - SPRING_DATASOURCE_URL=jdbc:postgresql://192.168.7.41:5432/postgres
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=admin
    networks:
      - app-network

  productservice:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - postgres
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://192.168.7.41:5432/postgres
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=admin
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "7777:80"  # Expose NGINX on port 7777
    depends_on:
      - orderservice
      - productservice
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # NGINX config file
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  zookeeper-data:  # Volume for Zookeeper data store outside container
    driver: local
  kafka-data:  # Volume for Kafka data store outside container
    driver: local
